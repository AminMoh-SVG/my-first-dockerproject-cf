# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Build and Deploy Node.js App to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ✅ Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2  # Change to your AWS region

      # ✅ Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ✅ Log in to AWS ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # ✅ Build and Tag Docker Image
      - name: Build and tag Docker image
        run: |
          ECR_REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com/my-nodejs-app
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-nodejs-app:latest .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/my-nodejs-app:latest $ECR_REPO:latest

      # ✅ Push Image to Docker Hub
      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-nodejs-app:latest

      # ✅ Push Image to AWS ECR
      - name: Push image to AWS ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com/my-nodejs-app:latest

      # ✅ Deploy CloudFormation Stack (Runs Before ECS Service)
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name nodejs-cloudformation-stack \
            --template-file terraform/cloudformation-stack.yml \
            --capabilities CAPABILITY_NAMED_IAM

      # ✅ Register ECS Task Definition (Updated JSON Format)
      - name: Register ECS Task Definition
        run: |
          cat <<EOF > task-def.json
          {
            "family": "my-nodejs-task",
            "requiresCompatibilities": ["FARGATE"],
            "networkMode": "awsvpc",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "cpu": "512",
            "memory": "1024",
            "containerDefinitions": [
              {
                "name": "nodejs-container",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com/my-nodejs-app:latest",
                "memory": 1024,
                "cpu": 512,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000
                  }
                ]
              }
            ]
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://task-def.json

      # ✅ Ensure ECS Service Exists or Update It
      - name: Update ECS Service
        run: |
          SERVICE_NAME="my-nodejs-service"
          CLUSTER_NAME="my-nodejs-cluster"
          LATEST_TASK_DEF=$(aws ecs describe-task-definition --task-definition my-nodejs-task --query "taskDefinition.taskDefinitionArn" --output text)
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition "$LATEST_TASK_DEF" --force-new-deployment










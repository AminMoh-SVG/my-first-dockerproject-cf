AWSTemplateFormatVersion: '2010-09-09'
Description: "Deploy EC2, EBS, S3, VPC, ECS, and ECR"

Resources:
  # 1Ô∏è‚É£ EC2 Instance with Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH and App Access"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 103.47.133.179/32  # Replace with your actual IP
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0  # Allow public access to Node.js app
 
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-064b71eca68aadfb8
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      SubnetId: subnet-0abc123456def7890  # Ensure it's in the correct AZ

  # 2Ô∏è‚É£ Attach EBS Volume
  MyVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt MyInstance.AvailabilityZone  # Ensures it matches EC2
      Size: 10

  MyVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MyInstance
      VolumeId: !Ref MyVolume
      Device: /dev/sdf
    DependsOn: MyInstance  # Ensure EC2 is ready before attaching

  # 3Ô∏è‚É£ Create an S3 Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-first-dockerproject-cf-bucket  # Optional

  # 4Ô∏è‚É£ Create a VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # 5Ô∏è‚É£ Create ECS Cluster
  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: my-ecs-cluster

  # 6Ô∏è‚É£ Create an ECR Repository
  MyECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: my-first-dockerproject-cf

  # 7Ô∏è‚É£ Define ECS Task Definition
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-task
      RequiresCompatibilities:
        - FARGATE
      Cpu: "2048"
      Memory: "8182"
      NetworkMode: awsvpc
      ExecutionRoleArn: arn:aws:iam::307946647513:role/ecsTaskExecutionRole  # Update with your IAM role
      ContainerDefinitions:
        - Name: my-first-dockerproject-cf
          Image: 307946647513.dkr.ecr.ap-southeast-2.amazonaws.com/my-first-dockerproject-cf:latest
          Memory: 8182
          Cpu: 2048
          PortMappings:
            - ContainerPort: 3000

  # 8Ô∏è‚É£ Create ECS Service
  MyECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyECSCluster
      ServiceName: my-ecs-service
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - subnet-0abc123456def7890  # Public subnet in AZ1
            - subnet-0xyz987654cba3210  # Private subnet in AZ2
          SecurityGroups:
            - !Ref InstanceSecurityGroup
          AssignPublicIp: ENABLED   # Needed if using a public subnet

  # 9Ô∏è‚É£ Create Application Load Balancer (ALB)
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-alb
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Subnets:
        - subnet-0abc123456def7890  # Public subnet in AZ1
        - subnet-0xyz987654cba3210  # Private subnet in AZ2

  # üîü Create ALB Listener
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  # 1Ô∏è‚É£1Ô∏è‚É£ Create ALB Target Group for ECS
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group
      Protocol: HTTP
      Port: 3000
      VpcId: !Ref my-vpc-01
      TargetType: ip